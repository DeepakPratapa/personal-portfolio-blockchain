import pkg from 'hardhat';
const { run, network } = pkg;
import fs from 'fs';

// These arguments must match your contract's constructor EXACTLY.
const portfolioConstructorArgs = [
  "Deepak Balaji Pratapa",
  "Full Stack Developer | Cloud Solutions | Cybersecurity Engineer",
  "A recent Computer Science graduate with a strong foundation in both software engineering and cybersecurity. Proven ability to design and build secure, scalable full-stack applications using React, Node.js, and Python. Experienced in cloud-native development with AWS and Firebase, implementing robust CI/CD pipelines, and applying industry-standard security tools for vulnerability assessment, threat detection, and incident response. Eager to apply a blend of software development and security expertise to build and protect innovative digital solutions.",
  "+1-(405)856-9454",
  "deepakpratapa2@gmail.com",
  "https://www.linkedin.com/in/deepak-pratapa-b6316b178",
  "https://github.com/DeepakPratapa"
];

// Helper function for verification
async function verify(contractAddress, args) {
  console.log(`Verifying contract at address: ${contractAddress}`);
  try {
    // The 'run' command automatically uses the --network flag from the command line
    await run("verify:verify", {
      address: contractAddress,
      constructorArguments: args,
    });
    console.log(`✅ Contract at ${contractAddress} verified successfully!`);
  } catch (e) {
    if (e.message.toLowerCase().includes("already verified")) {
      console.log("✅ Contract is already verified.");
    } else {
      console.error(`❌ Verification failed for ${contractAddress}:`, e.message);
    }
  }
}

async function main() {
  // Don't run verification on the local hardhat network
  if (network.name === "hardhat" || network.name === "localhost") {
      console.log("Skipping verification on a local network.");
      return;
  }
  
  // Read the deployed contract addresses from the files generated by deploy.js
  const portfolioAddress = fs.readFileSync("portfolio_address.txt", "utf8").trim();
  const verificationAddress = fs.readFileSync("verification_address.txt", "utf8").trim();

  console.log(`Found Portfolio address: ${portfolioAddress}`);
  console.log(`Found Verification address: ${verificationAddress}`);

  console.log("\n🔍 Verifying Portfolio contract...");
  await verify(portfolioAddress, portfolioConstructorArgs);
  
  console.log("\n🔍 Verifying ProjectVerification contract...");
  await verify(verificationAddress, []); // No constructor arguments for this one
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
